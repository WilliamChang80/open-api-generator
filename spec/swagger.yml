definitions:
  BaseResponse:
    properties:
      message:
        type: string
        x-go-name: Message
      status:
        format: int64
        type: integer
        x-go-name: Status
    type: object
    x-go-package: github.com/williamChang80/streaming-service/dto
  Closer:
    description: |-
      The behavior of Close after the first call is undefined.
      Specific implementations may document their own behavior.
    properties:
      Close:
        type: string
    title: Closer is the interface that wraps the basic Close method.
    type: object
    x-go-package: io
  File:
    allOf:
      - type: object
      - type: object
      - type: object
      - properties:
          Close:
            type: string
        type: object
    description: |-
      Its contents may be either stored in memory or on disk.
      If stored on disk, the File's underlying concrete type will be an *os.File.
    title: File is an interface to access the file part of a multipart message.
    type: object
    x-go-package: mime/multipart
  Reader:
    description: |-
      Read reads up to len(p) bytes into p. It returns the number of bytes
      read (0 <= n <= len(p)) and any error encountered. Even if Read
      returns n < len(p), it may use all of p as scratch space during the call.
      If some data is available but not len(p) bytes, Read conventionally
      returns what is available instead of waiting for more.

      When Read encounters an error or end-of-file condition after
      successfully reading n > 0 bytes, it returns the number of
      bytes read. It may return the (non-nil) error from the same call
      or return the error (and n == 0) from a subsequent call.
      An instance of this general case is that a Reader returning
      a non-zero number of bytes at the end of the input stream may
      return either err == EOF or err == nil. The next Read should
      return 0, EOF.

      Callers should always process the n > 0 bytes returned before
      considering the error err. Doing so correctly handles I/O errors
      that happen after reading some bytes and also both of the
      allowed EOF behaviors.

      Implementations of Read are discouraged from returning a
      zero byte count with a nil error, except when len(p) == 0.
      Callers should treat a return of 0 and nil as indicating that
      nothing happened; in particular it does not indicate EOF.

      Implementations must not retain p.
    title: Reader is the interface that wraps the basic Read method.
    type: object
    x-go-package: io
  ReaderAt:
    description: |-
      ReadAt reads len(p) bytes into p starting at offset off in the
      underlying input source. It returns the number of bytes
      read (0 <= n <= len(p)) and any error encountered.

      When ReadAt returns n < len(p), it returns a non-nil error
      explaining why more bytes were not returned. In this respect,
      ReadAt is stricter than Read.

      Even if ReadAt returns n < len(p), it may use all of p as scratch
      space during the call. If some data is available but not len(p) bytes,
      ReadAt blocks until either all the data is available or an error occurs.
      In this respect ReadAt is different from Read.

      If the n = len(p) bytes returned by ReadAt are at the end of the
      input source, ReadAt may return either err == EOF or err == nil.

      If ReadAt is reading from an input source with a seek offset,
      ReadAt should not affect nor be affected by the underlying
      seek offset.

      Clients of ReadAt can execute parallel ReadAt calls on the
      same input source.

      Implementations must not retain p.
    title: ReaderAt is the interface that wraps the basic ReadAt method.
    type: object
    x-go-package: io
  Seeker:
    description: |-
      Seek sets the offset for the next Read or Write to offset,
      interpreted according to whence:
      SeekStart means relative to the start of the file,
      SeekCurrent means relative to the current offset, and
      SeekEnd means relative to the end
      (for example, offset = -2 specifies the penultimate byte of the file).
      Seek returns the new offset relative to the start of the
      file or an error, if any.

      Seeking to an offset before the start of the file is an error.
      Seeking to any positive offset may be allowed, but if the new offset exceeds
      the size of the underlying object the behavior of subsequent I/O operations
      is implementation-dependent.
    title: Seeker is the interface that wraps the basic Seek method.
    type: object
    x-go-package: io
  UploadVideoRequestDto:
    properties:
      thumbnail:
        $ref: "#/definitions/File"
      title:
        type: string
        x-go-name: Title
      video:
        $ref: "#/definitions/File"
    type: object
    x-go-package: github.com/williamChang80/streaming-service/dto
paths:
  /api/v1/video/upload:
    get:
      operationId: UploadVideo
      parameters:
        - name: video
          required: true
          type: object
        - name: thumbnail
          required: true
          type: object
        - in: form
          name: title
          required: true
          type: string
        - in: header
          name: X-User-ID
          type: integer
      responses:
        "200":
          description: BaseResponse
          schema:
            $ref: "#/definitions/BaseResponse"
        "400":
          description: BaseResponse
          schema:
            $ref: "#/definitions/BaseResponse"
        "404":
          description: BaseResponse
          schema:
            $ref: "#/definitions/BaseResponse"
        "500":
          description: BaseResponse
          schema:
            $ref: "#/definitions/BaseResponse"
      tags:
        - video
swagger: "2.0"
